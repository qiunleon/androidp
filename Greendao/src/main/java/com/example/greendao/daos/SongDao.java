package com.example.greendao.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendao.entities.Song;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tblSong".
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "tblSong";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SongID = new Property(0, Long.class, "SongID", true, "SongID");
        public final static Property SongName = new Property(1, String.class, "songName", false, "SongName");
        public final static Property SongPy = new Property(2, String.class, "songPy", false, "SongPy");
        public final static Property SongWord = new Property(3, Integer.class, "songWord", false, "SongWord");
        public final static Property SingerName = new Property(4, String.class, "singerName", false, "songsterName");
        public final static Property SingerID1 = new Property(5, Integer.class, "singerID1", false, "SongsterID1");
        public final static Property SingerID2 = new Property(6, Integer.class, "singerID2", false, "SongsterID2");
        public final static Property SingerID3 = new Property(7, Integer.class, "singerID3", false, "SongsterID3");
        public final static Property SingerID4 = new Property(8, Integer.class, "singerID4", false, "SongsterID4");
        public final static Property SongTypeID1 = new Property(9, Integer.class, "songTypeID1", false, "SongTypeID1");
        public final static Property SongTypeID2 = new Property(10, Integer.class, "songTypeID2", false, "SongTypeID2");
        public final static Property SongTypeID3 = new Property(11, Integer.class, "songTypeID3", false, "SongTypeID3");
        public final static Property SongTypeID4 = new Property(12, Integer.class, "songTypeID4", false, "SongTypeID4");
        public final static Property LanguageTypeID = new Property(13, Integer.class, "languageTypeID", false, "LanguageTypeID");
        public final static Property LanguageTypeID2 = new Property(14, Integer.class, "languageTypeID2", false, "LanguageTypeID2");
        public final static Property LanguageTypeID3 = new Property(15, Integer.class, "languageTypeID3", false, "LanguageTypeID3");
        public final static Property LanguageTypeID4 = new Property(16, Integer.class, "languageTypeID4", false, "LanguageTypeID4");
        public final static Property PlayNumber = new Property(17, Integer.class, "playNumber", false, "PlayNum");
        public final static Property IsGrand = new Property(18, Integer.class, "isGrand", false, "IsGrand");
        public final static Property IsMShow = new Property(19, Integer.class, "isMShow", false, "IsMShow");
        public final static Property Album = new Property(20, String.class, "album", false, "album");
        public final static Property ErcVersion = new Property(21, String.class, "ercVersion", false, "ercVersion");
        public final static Property HasRemote = new Property(22, Integer.class, "hasRemote", false, "hasRemote");
        public final static Property LastUpdateTime = new Property(23, String.class, "lastUpdateTime", false, "LastUpdateTime");
        public final static Property IsLocalExist = new Property(24, Integer.class, "isLocalExist", false, "IsLocalExist");
    }


    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tblSong\" (" + //
                "\"SongID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: SongID
                "\"SongName\" TEXT NOT NULL ," + // 1: songName
                "\"SongPy\" TEXT NOT NULL ," + // 2: songPy
                "\"SongWord\" INTEGER NOT NULL ," + // 3: songWord
                "\"songsterName\" TEXT," + // 4: singerName
                "\"SongsterID1\" INTEGER," + // 5: singerID1
                "\"SongsterID2\" INTEGER," + // 6: singerID2
                "\"SongsterID3\" INTEGER," + // 7: singerID3
                "\"SongsterID4\" INTEGER," + // 8: singerID4
                "\"SongTypeID1\" INTEGER," + // 9: songTypeID1
                "\"SongTypeID2\" INTEGER," + // 10: songTypeID2
                "\"SongTypeID3\" INTEGER," + // 11: songTypeID3
                "\"SongTypeID4\" INTEGER," + // 12: songTypeID4
                "\"LanguageTypeID\" INTEGER NOT NULL ," + // 13: languageTypeID
                "\"LanguageTypeID2\" INTEGER," + // 14: languageTypeID2
                "\"LanguageTypeID3\" INTEGER," + // 15: languageTypeID3
                "\"LanguageTypeID4\" INTEGER," + // 16: languageTypeID4
                "\"PlayNum\" INTEGER," + // 17: playNumber
                "\"IsGrand\" INTEGER," + // 18: isGrand
                "\"IsMShow\" INTEGER," + // 19: isMShow
                "\"album\" TEXT," + // 20: album
                "\"ercVersion\" TEXT," + // 21: ercVersion
                "\"hasRemote\" INTEGER," + // 22: hasRemote
                "\"LastUpdateTime\" TEXT," + // 23: lastUpdateTime
                "\"IsLocalExist\" INTEGER);"); // 24: isLocalExist
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tblSong\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Song entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSongID());
        stmt.bindString(2, entity.getSongName());
        stmt.bindString(3, entity.getSongPy());
        stmt.bindLong(4, entity.getSongWord());
 
        String singerName = entity.getSingerName();
        if (singerName != null) {
            stmt.bindString(5, singerName);
        }
 
        Integer singerID1 = entity.getSingerID1();
        if (singerID1 != null) {
            stmt.bindLong(6, singerID1);
        }
 
        Integer singerID2 = entity.getSingerID2();
        if (singerID2 != null) {
            stmt.bindLong(7, singerID2);
        }
 
        Integer singerID3 = entity.getSingerID3();
        if (singerID3 != null) {
            stmt.bindLong(8, singerID3);
        }
 
        Integer singerID4 = entity.getSingerID4();
        if (singerID4 != null) {
            stmt.bindLong(9, singerID4);
        }
 
        Integer songTypeID1 = entity.getSongTypeID1();
        if (songTypeID1 != null) {
            stmt.bindLong(10, songTypeID1);
        }
 
        Integer songTypeID2 = entity.getSongTypeID2();
        if (songTypeID2 != null) {
            stmt.bindLong(11, songTypeID2);
        }
 
        Integer songTypeID3 = entity.getSongTypeID3();
        if (songTypeID3 != null) {
            stmt.bindLong(12, songTypeID3);
        }
 
        Integer songTypeID4 = entity.getSongTypeID4();
        if (songTypeID4 != null) {
            stmt.bindLong(13, songTypeID4);
        }
        stmt.bindLong(14, entity.getLanguageTypeID());
 
        Integer languageTypeID2 = entity.getLanguageTypeID2();
        if (languageTypeID2 != null) {
            stmt.bindLong(15, languageTypeID2);
        }
 
        Integer languageTypeID3 = entity.getLanguageTypeID3();
        if (languageTypeID3 != null) {
            stmt.bindLong(16, languageTypeID3);
        }
 
        Integer languageTypeID4 = entity.getLanguageTypeID4();
        if (languageTypeID4 != null) {
            stmt.bindLong(17, languageTypeID4);
        }
 
        Integer playNumber = entity.getPlayNumber();
        if (playNumber != null) {
            stmt.bindLong(18, playNumber);
        }
 
        Integer isGrand = entity.getIsGrand();
        if (isGrand != null) {
            stmt.bindLong(19, isGrand);
        }
 
        Integer isMShow = entity.getIsMShow();
        if (isMShow != null) {
            stmt.bindLong(20, isMShow);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(21, album);
        }
 
        String ercVersion = entity.getErcVersion();
        if (ercVersion != null) {
            stmt.bindString(22, ercVersion);
        }
 
        Integer hasRemote = entity.getHasRemote();
        if (hasRemote != null) {
            stmt.bindLong(23, hasRemote);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(24, lastUpdateTime);
        }
 
        Integer isLocalExist = entity.getIsLocalExist();
        if (isLocalExist != null) {
            stmt.bindLong(25, isLocalExist);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSongID());
        stmt.bindString(2, entity.getSongName());
        stmt.bindString(3, entity.getSongPy());
        stmt.bindLong(4, entity.getSongWord());
 
        String singerName = entity.getSingerName();
        if (singerName != null) {
            stmt.bindString(5, singerName);
        }
 
        Integer singerID1 = entity.getSingerID1();
        if (singerID1 != null) {
            stmt.bindLong(6, singerID1);
        }
 
        Integer singerID2 = entity.getSingerID2();
        if (singerID2 != null) {
            stmt.bindLong(7, singerID2);
        }
 
        Integer singerID3 = entity.getSingerID3();
        if (singerID3 != null) {
            stmt.bindLong(8, singerID3);
        }
 
        Integer singerID4 = entity.getSingerID4();
        if (singerID4 != null) {
            stmt.bindLong(9, singerID4);
        }
 
        Integer songTypeID1 = entity.getSongTypeID1();
        if (songTypeID1 != null) {
            stmt.bindLong(10, songTypeID1);
        }
 
        Integer songTypeID2 = entity.getSongTypeID2();
        if (songTypeID2 != null) {
            stmt.bindLong(11, songTypeID2);
        }
 
        Integer songTypeID3 = entity.getSongTypeID3();
        if (songTypeID3 != null) {
            stmt.bindLong(12, songTypeID3);
        }
 
        Integer songTypeID4 = entity.getSongTypeID4();
        if (songTypeID4 != null) {
            stmt.bindLong(13, songTypeID4);
        }
        stmt.bindLong(14, entity.getLanguageTypeID());
 
        Integer languageTypeID2 = entity.getLanguageTypeID2();
        if (languageTypeID2 != null) {
            stmt.bindLong(15, languageTypeID2);
        }
 
        Integer languageTypeID3 = entity.getLanguageTypeID3();
        if (languageTypeID3 != null) {
            stmt.bindLong(16, languageTypeID3);
        }
 
        Integer languageTypeID4 = entity.getLanguageTypeID4();
        if (languageTypeID4 != null) {
            stmt.bindLong(17, languageTypeID4);
        }
 
        Integer playNumber = entity.getPlayNumber();
        if (playNumber != null) {
            stmt.bindLong(18, playNumber);
        }
 
        Integer isGrand = entity.getIsGrand();
        if (isGrand != null) {
            stmt.bindLong(19, isGrand);
        }
 
        Integer isMShow = entity.getIsMShow();
        if (isMShow != null) {
            stmt.bindLong(20, isMShow);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(21, album);
        }
 
        String ercVersion = entity.getErcVersion();
        if (ercVersion != null) {
            stmt.bindString(22, ercVersion);
        }
 
        Integer hasRemote = entity.getHasRemote();
        if (hasRemote != null) {
            stmt.bindLong(23, hasRemote);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(24, lastUpdateTime);
        }
 
        Integer isLocalExist = entity.getIsLocalExist();
        if (isLocalExist != null) {
            stmt.bindLong(25, isLocalExist);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.getLong(offset + 0), // SongID
            cursor.getString(offset + 1), // songName
            cursor.getString(offset + 2), // songPy
            cursor.getInt(offset + 3), // songWord
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // singerName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // singerID1
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // singerID2
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // singerID3
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // singerID4
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // songTypeID1
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // songTypeID2
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // songTypeID3
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // songTypeID4
            cursor.getInt(offset + 13), // languageTypeID
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // languageTypeID2
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // languageTypeID3
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // languageTypeID4
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // playNumber
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // isGrand
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // isMShow
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // album
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // ercVersion
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // hasRemote
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // lastUpdateTime
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24) // isLocalExist
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setSongID(cursor.getLong(offset + 0));
        entity.setSongName(cursor.getString(offset + 1));
        entity.setSongPy(cursor.getString(offset + 2));
        entity.setSongWord(cursor.getInt(offset + 3));
        entity.setSingerName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSingerID1(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSingerID2(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSingerID3(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSingerID4(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSongTypeID1(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSongTypeID2(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSongTypeID3(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSongTypeID4(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setLanguageTypeID(cursor.getInt(offset + 13));
        entity.setLanguageTypeID2(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setLanguageTypeID3(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setLanguageTypeID4(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setPlayNumber(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setIsGrand(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setIsMShow(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setAlbum(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setErcVersion(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHasRemote(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setLastUpdateTime(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIsLocalExist(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setSongID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getSongID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Song entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
