apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply from: "${rootDir}/version.gradle"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.example.client"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        ndk {
            abiFilters "x86"
        }

//        splits {
//            abi {
//                enable true
//                reset()
//                include 'x86'
//                universalApk true
//            }
//        }
    }

    signingConfigs {
        debug {
            storeFile file("${rootDir.absolutePath}/androidp.keystore")
            keyAlias rootProject.name
            storePassword rootProject.name
            keyPassword rootProject.name
        }
        release {
            storeFile file("${rootDir.absolutePath}/androidp.keystore")
            keyAlias rootProject.name
            storePassword rootProject.name
            keyPassword rootProject.name
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            jniLibs.srcDir('src/main/libs')
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    lintOptions {
        abortOnError false
    }

    // Rename APK files
    applicationVariants.all { variant ->
        def output = variant.outputs.get(0)
        File apk = output.outputFile
        String Name = output.outputFile.name
                .replace(".apk", "-${buildTime()}-${project.ext.versionInfo.build}.apk")
        output.outputFile = new File(apk.parentFile, Name)
    }

//    project.tasks.whenTaskAdded { task ->
//        android.applicationVariants.all { variant ->
//            if (task.name == "prepare${variant.name.capitalize()}Dependencies") {
//                task.dependsOn ":library:assemble${variant.name.capitalize()}"
//            }
//        }
//    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('AndroidTest')) {
        task.enabled = false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:design:25.3.1'
    compile project(':scrollview')
    compile 'com.android.support:support-v4:25.0.0'
    compile 'com.melnykov:floatingactionbutton:1.3.0'
}

afterEvaluate {
    tasks.getByName("assembleRelease").doLast {
        copy {
            from("$buildDir/outputs/apk") {
                exclude '**/*unsigned.apk', '**/*unaligned.apk'
                include "**/${project.name}*.apk"
            }
            into "${rootDir.absolutePath}\\apk"
            rename(/(.)*\.apk/, "${project.name}.apk")
        }
        println install()
    }

    tasks.getByName("assembleRelease").doLast {
        delete "${projectDir.absolutePath}/build"
    }
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd-HH-mm-ss", TimeZone.getTimeZone("GMT+8"))
}

def coreWrapperDir = new File("${projectDir}/src/main/java/com/example/client/jni")

task createCoreWrapperDir {
    coreWrapperDir.mkdirs()
}

// For this to work, it's assumed SWIG is installed
// FIXME: This only works when called from Command Line (gradlew swig)
task swig(type: Exec, dependsOn: ['createCoreWrapperDir']) {
    String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("windows")) {
        commandLine 'cmd', '/c', 'swig'
        args '-java', '-package', 'com.example.client.jni', '-outdir', coreWrapperDir.absolutePath, '-o', "${projectDir}/src/main/jni/example_wrap.c", "${projectDir}/src/main/jni/Example.i"
    } else {
        commandLine 'swig'
        args '-c++', '-java', '-package', 'com.example.client.jni', '-outdir', coreWrapperDir.absolutePath, '-o', "${projectDir}/src/main/jni/example_wrap.c", "${projectDir}/src/main/jni/Example.i"
    }
}

// adb install [-r] [xxx.apk]
// FIXME: This only works when called from Command Line (gradlew install)
def install() {
    String cmd = "adb -s 192.168.193.101:5555 install -r ${rootDir.absolutePath}\\apk\\${project.name}.apk"
    cmd.execute()
//    commandLine 'cmd', '/c', 'adb', '-s', '192.168.193.101:5555', 'install', '-r', rootDir.absolutePath + "\\apk\\${project.name}.apk"
}

// adb push [xxx.apk] [destination]
// FIXME: This only works when called from Command Line (gradlew push)
task push(type: Exec, dependsOn: ['remount']) {
    commandLine 'cmd', '/c', 'adb', 'push', rootDir.absolutePath + "\\apk\\${project.name}.apk", 'system/app'
}

// adb remount
task remount(type: Exec, dependsOn: ['killServer']) {
    commandLine 'cmd', '/c', 'adb', 'remount'
}

//task killServer(type: Exec){
//    commandLine 'cmd', '/c', 'adb', 'kill-server'
//}

//task deleteApk(type: Delete) {
//    delete "${rootDir.absolutePath}/apk"
//}