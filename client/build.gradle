apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply from: "${rootDir}/gradle/version.gradle"

android {
    compileSdkVersion 22
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.example.client"
        minSdkVersion 22
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
    }

    sourceSets{
        main {
            jniLibs.srcDir('src/main/jniLibs')
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    // Rename APK files
    applicationVariants.all { variant ->
        def output = variant.outputs.get(0)
        File apk = output.outputFile
        String newName = output.outputFile.name
//                .replace("-release", "")
//                .replace("-debug", "")
                .replace(".apk", "-${variant.mergedFlavor.versionName}-${project.ext.versionInfo.build}.apk")
                .replace("app-", "${variant.mergedFlavor.applicationId}-")
        output.outputFile = new File(apk.parentFile, newName)
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:22.1.0'
    testCompile 'junit:junit:4.12'
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'
    compile 'com.android.support:multidex:1.0.1'
}

afterEvaluate {
    tasks.getByName('assembleDebug').doLast {
        copy {
            from 'build/outputs/apk/client-debug-1.0-1aa599f.apk'
            into rootDir.absolutePath
            rename 'client-debug-1.0-1aa599f.apk', 'cbb.apk'
        }
    }
}

def coreWrapperDir = new File("${projectDir}/src/main/java/com/example/client/jni")

task createCoreWrapperDir {
    coreWrapperDir.mkdirs()
}

// For this to work, it's assumed SWIG is installed
// FIXME: This only works when called from Command Line (gradlew runSwig)
task swig(type:Exec, dependsOn: ['createCoreWrapperDir']) {
    String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("windows")) {
        commandLine 'cmd', '/c', 'swig'
        args '-java', '-package', 'com.example.client.jni', '-outdir', coreWrapperDir.absolutePath, '-o', "${projectDir}/src/main/jni/example_wrap.c", "${projectDir}/src/main/jni/example.i"
    }
    else {
        commandLine 'swig'
        args '-c++', '-java', '-package', 'com.example.client.jni', '-outdir', coreWrapperDir.absolutePath, "${projectDir}/src/main/jni/SeePlusPlus.i"
    }
}